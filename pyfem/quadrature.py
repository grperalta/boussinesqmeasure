# -*- coding: utf-8 -*-

from __future__ import division
import numpy as np

class Quadrature():
    """
    Class for numerical quadrature formulas.
    """

    def __init__(self, node, weight, dim, order):
        """
        Class initialization.

        Attributes
        ----------
            node : array
                quadrature node
            wghts : array
                quadrature weight
            dim : int
                dimension of integration
            order : int
                order of quadrature rule
        """
        self.node = node
        self.weight = weight
        self.order = order
        self.dim = dim


def quad_gauss_tri(order):
    """
    Gauss integration on the reference triangle with vertices at
    (0, 0), (0, 1) and (1, 0).

    Parameters
    ----------
        order : int
            order of gaussian quadrature

    Returns
    -------
        Quadrature class

    To do
    ------
        * Include quadrature order higher than 6.
    """

    dim = 2

    if order == 1:
        node = np.array([1./3, 1./3])
        weight = np.array([1./2])
    elif order == 2:
        node = np.array([
            [0.1666666666666666666666,
             0.6666666666666666666666,
             0.1666666666666666666666],
            [0.1666666666666666666666,
             0.1666666666666666666666,
             0.6666666666666666666666]]).T
        weight = np.array(
            [0.1666666666666666666666,
             0.1666666666666666666666,
             0.1666666666666666666666])
    elif order == 3:
        node = np.array([
            [0.333333333333333,
             0.200000000000000,
             0.600000000000000,
             0.200000000000000],
            [0.333333333333333,
             0.600000000000000,
             0.200000000000000,
             0.200000000000000]]).T
        weight = np.array(
            [-0.28125000000000,
             0.260416666666667,
             0.260416666666667,
             0.260416666666667])
    elif order == 4:
        node = np.array([
            [0.4459484909159650,
             0.0915762135097699,
             0.1081030181680700,
             0.8168475729804590,
             0.4459484909159650,
             0.0915762135097710],
            [0.1081030181680700,
             0.8168475729804590,
             0.4459484909159650,
             0.0915762135097710,
             0.4459484909159650,
             0.0915762135097699]]).T
        weight = np.array(
            [0.111690794839006,
             0.054975871827661,
             0.111690794839006,
             0.054975871827661,
             0.111690794839006,
             0.054975871827661])
    elif order == 5:
        node = np.array([
            [0.333333333333333,
             0.470142064105115,
             0.101286507323457,
             0.059715871789770,
             0.797426985353087,
             0.470142064105115,
             0.101286507323456],
            [0.333333333333333,
             0.059715871789770,
             0.797426985353087,
             0.470142064105115,
             0.101286507323456,
             0.470142064105115,
             0.101286507323457]]).T
        weight = np.array(
            [0.1125000000000000,
             0.0661970763942530,
             0.0629695902724135,
             0.0661970763942530,
             0.0629695902724135,
             0.0661970763942530,
             0.0629695902724135])
    elif order == 6:
        node = np.array([
            [0.2492867451709110,
             0.0630890144915021,
             0.5014265096581790,
             0.8738219710169960,
             0.2492867451709100,
             0.0630890144915020,
             0.6365024991213990,
             0.3103524510337840,
             0.0531450498448170,
             0.0531450498448170,
             0.3103524510337840,
             0.6365024991213990],
            [0.5014265096581790,
             0.8738219710169960,
             0.2492867451709100,
             0.0630890144915020,
             0.2492867451709110,
             0.0630890144915021,
             0.0531450498448170,
             0.0531450498448170,
             0.3103524510337840,
             0.6365024991213990,
             0.6365024991213990,
             0.3103524510337840]]).T
        weight = np.array(
            [0.0583931378631895,
             0.0254224531851035,
             0.0583931378631895,
             0.0254224531851035,
             0.0583931378631895,
             0.0254224531851035,
             0.0414255378091870,
             0.0414255378091870,
             0.0414255378091870,
             0.0414255378091870,
             0.0414255378091870,
             0.0414255378091870])
    else:
        node = None
        weight = None
        order = None
        dim = None
        message = 'Number of quadrature order available up to 6 only.'
        raise UserWarning(message)

    return Quadrature(node, weight, dim, order)
